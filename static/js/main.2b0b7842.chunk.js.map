{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/Card.js","components/CardColumn.js","App.js","serviceWorker.js","index.js"],"names":["toggleClass","Navbar","props","message","effClass","cScore","animId","react_default","a","createElement","className","href","src","process","alt","concat","tScore","Footer","role","aria-label","Card","imgUrl","image","isAnimated","onClick","hClick","CardColumn","images","map","components_Card","key","id","url","name","App","state","topScore","currScore","clickedList","imageArr","clickImage","console","log","_this","indexOf","newList","push","setState","shuffle","timeHandle","setTimeout","timeoutCB","arr","j","x","i","length","Math","floor","random","this","clearTimeout","components_Navbar","components_CardColumn","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b0b7842.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Navbar.css\";\n// import logo from process.env.PUBLIC_URL+\"/images/logo.png\";\n\n// By importing the Navbar.css file, it is added to the DOM whenever this component loads\nvar toggleClass = 0;\nfunction Navbar(props) {\n  var message = \"\";\n  var effClass = \"\";\n  if (props.cScore===0) {\n    message = \"Click an image to start! Don't click on the same image twice!\";\n    effClass = \"glow\"\n  } else if ( props.animId<0) {\n    message = \"YAY, You guessed correctly!\";\n    if (toggleClass===0) {\n      effClass = \"blinkyay\"\n      toggleClass = 1;\n    } else {\n      effClass = \"blinkyay2\"\n      toggleClass = 0;\n    }\n  } else {\n    message = \"NAY, You guessed incorrectly!\";\n    effClass = \"blinknay\"\n  }\n\n  return (\n    <nav className=\"navbar navbar-light py-0\">\n      <a className=\"navbar-brand py-0\" href=\"/\"><img src={process.env.PUBLIC_URL+\"/images/logo.png\"} alt=\"logo\" /></a>\n\n      <h3 className={`game-message mr-auto ${effClass}`}>{message}</h3>\n\n      <h4 className=\"mr-5 my-0\">Score: {props.cScore} | Top Score: {props.tScore}</h4>\n\n    </nav>\n\n\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\r\nimport \"../styles/Footer.css\";\r\n\r\n// By importing the Navbar.css file, it is added to the DOM whenever this component loads\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p className=\"my-0 py-2\"><span role=\"img\" aria-label=\"emoji\">©️</span> Copyright</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"../styles/Card.css\";\r\n\r\nfunction Card(props) {\r\n    var imgUrl = props.image;\r\n    if (props.isAnimated) {\r\n        imgUrl = \"../images/shocked.png\";\r\n    } \r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <img className={`card-img-top ${props.isAnimated?\"img-shake\":\"\"}`} alt={props.alt} onClick={props.hClick} src={process.env.PUBLIC_URL + imgUrl} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"../styles/Card.css\";\r\nimport Card from \"./Card.js\";\r\n\r\n\r\n\r\nfunction CardColumn(props) {\r\n    return (\r\n        <div className=\"card-columns mx-auto mt-3\">\r\n            {props.images.map((image) =>\r\n                <Card\r\n                    key={image.id}\r\n                    image={image.url}\r\n                    alt={image.name}\r\n                    isAnimated={image.id===props.animId}\r\n                    hClick={()=> props.hClick(image.id)}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardColumn;","import React from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer.js\";\nimport CardColumn from \"./components/CardColumn.js\";\nimport imageArr from \"./images.json\";\n\n\nclass App extends React.Component {\n  state = {\n    topScore: 0,\n    currScore: 0,\n    clickedList: [],\n    images: imageArr,\n    animId: -1\n  };\n\n  shuffle(arr) {\n    var j, x, i;\n    for (i = arr.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = arr[i];\n      arr[i] = arr[j];\n      arr[j] = x;\n    }\n    return arr;\n  }\n  componentDidMount() {\n    this.setState({ images: this.shuffle(this.state.images) });\n  }\n\n  timeoutCB() {\n    console.log(\"timeout call back!\");\n    clearTimeout(this.timeHandle);\n    this.setState({\n      topScore: this.state.currScore > this.state.topScore ? this.state.currScore : this.state.topScore,\n      currScore: 0,\n      clickedList: [],\n      images: this.shuffle(this.state.images),\n      animId: -1\n    });\n  }\n\n  clickImage = id => {\n    console.log(\"click \" + id);\n    if (this.state.clickedList.indexOf(id) < 0) {\n      // not found - haven't clicked this image yet.\n      var newList = this.state.clickedList;\n      newList.push(id);\n      console.log(newList);\n      this.setState({\n        currScore: this.state.currScore + 1,\n        clickedList: newList,\n        images: this.shuffle(this.state.images)\n      });\n    } else {\n      // update topScore if current score is higher. and start new game.\n      this.timeHandle = setTimeout(() => this.timeoutCB(), 550);\n\n      this.setState({\n        animId: id\n      });\n \n    }\n  }\n\n\n  render() {\n    return [\n      <Navbar cScore={this.state.currScore} tScore={this.state.topScore} animId={this.state.animId} />,\n      <CardColumn images={this.state.images} hClick={this.clickImage} animId={this.state.animId} />,\n      <Footer />\n    ];\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}